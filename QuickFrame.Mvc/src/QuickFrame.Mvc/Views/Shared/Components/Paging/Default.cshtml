@inject Microsoft.Extensions.Options.IOptions<QuickFrame.Mvc.Configuration.ViewOptions> viewOptions
@{
	var itemsPerPageList = new List<SelectListItem>();

	var action = ViewContext.RouteData.Values["action"];
	var controller = ViewContext.RouteData.Values["controller"].ToString();
	var area = ViewContext.RouteData.Values["area"]?.ToString();

	var routeValues = new System.Dynamic.ExpandoObject();

	var query = Context.Request.Query;

	if(query != null) {
		foreach(var obj in query) {
			if(obj.Value.Count == 1) {
				((System.Collections.Generic.IDictionary<string, object>)routeValues)[obj.Key] = obj.Value[0];
			} else {
				((System.Collections.Generic.IDictionary<string, object>)routeValues)[obj.Key] = obj.Value.ToArray();
			}
		}
	}

	if(!String.IsNullOrEmpty(area)) {
		((System.Collections.Generic.IDictionary<string, object>)routeValues)["area"] = area;
	}

	foreach(var obj in viewOptions.Value.PerPageList) {
		itemsPerPageList.Add(obj);
	}

	var itemsPerPage = 25;
	Int32.TryParse(viewOptions.Value.PerPageDefault, out itemsPerPage);
	if(!String.IsNullOrEmpty(Context.Request.Query["itemsPerPage"])) {
		Int32.TryParse(Context.Request.Query["itemsPerPage"], out itemsPerPage);
	}

	var currentPage = 1;

	if(!String.IsNullOrEmpty(Context.Request.Query["page"])) {
		Int32.TryParse(Context.Request.Query["page"], out currentPage);
	}

	var totalItems = ViewBag.TotalItems;
	var totalPages = 0;
	if(itemsPerPage > 0 && totalItems > 0) {
		totalPages = (int)Math.Ceiling((double)totalItems / (double)itemsPerPage);
	}

	if(currentPage > totalPages) {
		currentPage = 1;
		((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = 1;
	}
}
@{
	if(totalItems > itemsPerPage) {
		<div style="float:right">
			<select style="width:auto;float:left;margin-right:15px;"
					class="item-count-dropdown form-control"
					onchange="javascript:window.location.href = $('.item-count-dropdown option:selected').attr('tag')">
				@{
					foreach(var item in itemsPerPageList) {
						((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = 1;
						((System.Collections.Generic.IDictionary<string, object>)routeValues)["itemsPerPage"] = item.Value;
						if(Convert.ToInt32(item.Value) == itemsPerPage) {
							<option value="@item.Value"
									tag="@Url.Action($"{action}", $"{controller}", routeValues)"
									selected>
								@item.Text
							</option>
						} else {
							<option value="@item.Value"
									tag="@Url.Action($"{action}", $"{controller}", routeValues)">
								@item.Text
							</option>
						}
					}
				}
			</select>
			<ul class="pagination pagination-sm" style="display:inline">
				<li>
					@{
				((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = 1;
				((System.Collections.Generic.IDictionary<string, object>)routeValues)["itemsPerPage"] = itemsPerPage;
					}
					<a href="@Url.Action($"{action}", $"{controller}", routeValues)">«</a>
				</li>
				<li>
					@{
				((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = currentPage - 1 > 0 ? currentPage - 1 : 1;
					}
					<a href="@Url.Action($"{action}", $"{controller}", routeValues)">‹</a>
				</li>
				@{
					switch(totalPages) {
						case 0:
							break;
						case 2:
							<li>
								@{
									((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = 1;
									if(currentPage == 1) {
										<span>1</span>
									} else {
										<a href="@Url.Action($"{action}", $"{controller}", routeValues)">1</a>
									}
								}
							</li>
							<li>
								@{
							((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = 2;
									if(currentPage == 2) {
										<span>2</span>
									} else {
										<a href="@Url.Action($"{action}", $"{controller}", routeValues)">2</a>
									}
								}
							</li>
										break;
									case 3:
									case 4:
									case 5:
										for(int i = 1; i < totalPages; i++) {
											<li>
												@{
													((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = i;
													if(currentPage == i) {
														<span>@i</span>
													} else {
														<a href="@Url.Action($"{action}", $"{controller}", routeValues)">@i</a>
													}
												}
											</li>
														}
														break;
													default:
														if(currentPage < 4) {
															for(int i = 1; i < 6; i++) {
																<li>
																	@{					((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = i;
																		if(currentPage == i) {
																			<span>@i</span>				} else {
																			<a href="@Url.Action($"{action}", $"{controller}", routeValues)">@i</a>				}
																	}
																</li>					}
																		} else {
																			var endPage = currentPage + 2 < totalPages ? currentPage + 3 : totalPages + 1;
																			for(int i = endPage - 5; i < endPage; i++) {
																				<li>
																					@{							((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = i;
																						if(currentPage == i) {
																							<span>@i</span>				} else {
																							<a href="@Url.Action($"{action}", $"{controller}", routeValues)">@i</a>				}
																					}
																				</li>						}
																							}
																							break;
																						}
				}
				<li>
					@{
				((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = currentPage + 1 <= totalPages ? currentPage + 1 : totalPages;
					}
					<a href="@Url.Action($"{action}", $"{controller}", routeValues)">›</a>
				</li>
				<li>
					@{
				((System.Collections.Generic.IDictionary<string, object>)routeValues)["page"] = totalPages;
					}
					<a href="@Url.Action($"{action}", $"{controller}", routeValues)">»</a>
				</li>
			</ul>
		</div>
	}
}
